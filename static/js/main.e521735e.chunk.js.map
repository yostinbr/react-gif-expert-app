{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","encodeCategory","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","url","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","setTimeout","useFetchGifs","console","log","role","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAE3B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KA4BA,OAEI,aADA,CACA,QAAMC,SAxBW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAI1BR,GAAc,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACvCN,EAAc,MAgBlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAhCc,SAACP,GACvBF,EAAeE,EAAEQ,OAAOF,a,+BCRnBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,4DAEC,iCACL,mCACTC,EAJa,UAIQC,UAAWH,IAJnB,SAMAI,MAAM,GAAD,OAJJ,iCAII,oBAA4BF,EAA5B,oBAHT,qCAHI,cAMbG,EANa,gBAQIA,EAAKC,OART,uBAQXC,EARW,EAQXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXC,IAAG,UAAEH,EAAII,cAAN,aAAE,EAAYC,iBAAiBF,QAdvB,kBAkBZL,GAlBY,4CAAH,sDCEPQ,EAAc,SAAC,GAAsB,IAAnBJ,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,IAElC,OACI,sBAAKI,UAAU,+CAAf,UACI,qBAAKC,IAAML,EAAMM,IAAMP,IACnB,4BAAKA,QCDRQ,EAAU,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SAMtB,ECTwB,SAAEA,GAC1B,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNc,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAiBA,OAZAC,qBAAW,WACPzB,EAASC,GACJyB,MAAM,SAAAC,GACHC,YAAY,WACRJ,EAAS,CACLhB,KAAMmB,EACNL,SAAS,MAEd,WAEZ,CAAErB,IAEEsB,EDT2BM,CAAc5B,GAAlCc,EAAd,EAAQP,KAAcc,EAAtB,EAAsBA,QAYtB,OAVAQ,QAAQC,IAAIT,GAWR,eAAC,WAAD,WACI,6BAAMrB,IAEJqB,GACE,qBAAKJ,UAAU,gCAAf,SACI,qBAAKA,UAAU,iBAAiBc,KAAK,SAArC,SACI,sBAAMd,UAAU,UAAhB,4BAMZ,qBAAKA,UAAU,YAAf,SAaQH,EAAOL,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAESA,GADCA,EAAIC,aEhDzBqB,EAAe,WAExB,MAAoC9C,mBAAS,CAAC,WAA9C,mBAAO+C,EAAP,KAAmBhD,EAAnB,KAEA,OACI,gCACI,gDACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBACA,6BAEQgD,EAAWxB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAWA,GADLA,YCXlCkC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.e521735e.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ( { setCategories } ) => {\r\n    \r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue( e.target.value );\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if(inputValue.trim().length > 2) {\r\n            //Si quiere añadir al final se puede usar de esta manera\r\n            //setCategories( cats => [...cats, inputValue]);\r\n            //Si quiere añadir al inicio se puede usar de esta manera\r\n            setCategories(cats => [ inputValue, ...cats ]);\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    /*const handleAdd = () => {\r\n        //Si queremos que el valor agregado quede de último se hace de la siguiente manera\r\n        //setcategories([ ...categories, 'Naruto' ]);\r\n        //Si queremos que el valor agregado quede de primero se hace de la siguiente manera\r\n        //setcategories([ 'Naruto', ...categories ]);\r\n\r\n        //Se puede realizar de la siguiente manera tambien.\r\n        setcategories( cats => [...categories, 'Naruto']);\r\n    }*/\r\n \r\n    return (\r\n        //En el caso de los form no es necesario usar un fragment\r\n        <form onSubmit={ handleSubmit }>\r\n            <input \r\n                type=\"text\"\r\n                value={ inputValue }\r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","export const getGifs = async ( category ) => {\r\n\r\n    const baseUrlGifs = 'https://api.giphy.com/v1/gifs/';\r\n    const apiKey = 'N5SS9KbLBisQvDvbuqm8Dtrz2fllSRxn';\r\n    const encodeCategory = `${ encodeURI( category ) }`;\r\n\r\n    const resp = await fetch(`${baseUrlGifs}search?q=${ encodeCategory }&api_key=${apiKey}`);\r\n    //Como la resp tiene una data dentro de la constante data, podemos desestructurar obteniendo la data directamente.\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    });\r\n\r\n    return gifs;\r\n\r\n}","import React from 'react';\r\n\r\nexport const GifGridItem = ( { title, url } ) => {\r\n    \r\n    return (\r\n        <div className=\"card animate__animated animate__jackInTheBox\">\r\n            <img src={ url } alt={ title } />\r\n                <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Fragment, \r\n    //useState, useEffect \r\n} from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    //Sin destructuración\r\n    //const state = useFetchGifs();\r\n\r\n    //Con destructuración\r\n    const { data: images, loading } = useFetchGifs( category );\r\n\r\n    console.log(loading);\r\n\r\n    /*const [images, setImages] = useState([]);\r\n\r\n    useEffect(() => {\r\n        getGifs( category )\r\n            //.then( imgs => setImages( imgs ))//Puede funcionar de esta forma\r\n            .then( setImages)//Puede funcionar de esta forma tambien\r\n    }, [ category ])\r\n*/\r\n    return (\r\n        <Fragment>\r\n            <h3>{ category }</h3>\r\n            \r\n            { loading && \r\n                <div className=\"d-flex justify-content-center\">\r\n                    <div className=\"spinner-border\" role=\"status\">\r\n                        <span className=\"sr-only\">Loading...</span>\r\n                    </div>\r\n                </div>\r\n            }\r\n            \r\n\r\n            <div className=\"card-grid\">\r\n            \r\n                { \r\n                    //Sin destructuración\r\n                    /*images.map(img => ( \r\n                        <li key={ img.id }> { img.title } </li>\r\n                    ))*/\r\n                    //Con destructuración\r\n                    /*images.map( ({ id, title }) => (\r\n                        <li key={ id }> { title }</li>\r\n                    ))*/\r\n\r\n                    //Usando otro componente\r\n                    images.map( img  => (\r\n                        <GifGridItem \r\n                            key={ img.id }\r\n                            { ...img }\r\n                        />\r\n                    ))\r\n                }\r\n            \r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n","import { useEffect, useState } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n        getGifs( category )\r\n            .then( imgs => {\r\n                setTimeout( () => {\r\n                    setstate({\r\n                        data: imgs,\r\n                        loading: false\r\n                    })\r\n                }, 1500 );\r\n            })\r\n    }, [ category ]);\r\n\r\n    return state;\r\n\r\n}","import React, { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['Naruto']);\r\n\r\n    return (\r\n        <div>\r\n            <h2>Gif Expert App</h2>\r\n            <AddCategory setCategories={ setCategories } />\r\n            <hr/>\r\n            <ol>\r\n                {\r\n                    categories.map( category => (\r\n                        <GifGrid \r\n                            key={ category }\r\n                            category={ category } \r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { GifExpertApp } from './GifExpertApp';\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}